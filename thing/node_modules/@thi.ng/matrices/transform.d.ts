import type { ReadonlyVec } from "@thi.ng/vectors";
import type { Mat } from "./api.js";
/**
 * Creates 2x3 TRS transformation matrix from given translation vector,
 * rotation angle and scale factor/vector.
 *
 * @param out -
 * @param translate -
 * @param rotation -
 * @param scale -
 */
export declare const transform23: (out: Mat | null, translate: ReadonlyVec, rotation: number, scale: number | ReadonlyVec) => import("@thi.ng/vectors").Vec;
/**
 * Creates 4x4 TRS transformation matrix from given translation vector,
 * rotation angles (given as 3D vector) and scale factor/vector.
 * Internally, uses a quaternion for constructing the rotation matrix
 * part. The quaternion is created via {@link quatFromEuler} with ZYX
 * ordering.
 *
 * @param out -
 * @param translate -
 * @param rotation -
 * @param scale -
 */
export declare const transform44: (out: Mat | null, translate: ReadonlyVec, rotation: ReadonlyVec, scale: number | ReadonlyVec) => import("@thi.ng/vectors").Vec;
//# sourceMappingURL=transform.d.ts.map