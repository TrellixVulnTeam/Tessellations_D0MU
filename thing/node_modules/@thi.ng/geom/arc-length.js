import { defmulti } from "@thi.ng/defmulti/defmulti";
import { perimeter } from "@thi.ng/geom-poly-utils/perimeter";
import { PI, TAU } from "@thi.ng/math/api";
import { dist } from "@thi.ng/vectors/dist";
import { __dispatch } from "./internal/dispatch.js";
/**
 * Returns the arc length / perimeter / circumference of the given
 * shape. For groups calls {@link arcLength} for each child and returns the
 * sum of results.
 *
 * Implemented for:
 *
 * - Circle
 * - Ellipse
 * - Group
 * - Line
 * - Polygon
 * - Polyline
 * - Quad
 * - Rect
 * - Triangle
 *
 */
export const arcLength = defmulti(__dispatch, {
    quad: "poly",
    tri: "poly",
}, {
    circle: ($) => TAU * $.r,
    ellipse: ({ r: [a, b] }) => 
    // Ramanujan approximation
    // https://www.mathsisfun.com/geometry/ellipse-perimeter.html
    PI * (3 * (a + b) - Math.sqrt((3 * a + b) * (3 * b + a))),
    group: ({ children }) => children.reduce((sum, $) => sum + arcLength($), 0),
    line: ({ points }) => dist(points[0], points[1]),
    poly: ({ points }) => perimeter(points, points.length, true),
    polyline: ({ points }) => perimeter(points, points.length),
    rect: ({ size }) => 2 * (size[0] + size[1]),
    tri: ({ points }) => dist(points[0], points[1]) +
        dist(points[1], points[2]) +
        dist(points[2], points[0]),
});
