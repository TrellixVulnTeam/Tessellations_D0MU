import type { Fn } from "@thi.ng/api";
import type { PCLike, PCLikeConstructor } from "@thi.ng/geom-api";
import type { MatOpMV, ReadonlyMat } from "@thi.ng/matrices";
import type { ReadonlyVec } from "@thi.ng/vectors";
export declare const __transformPoints: (pts: ReadonlyVec[], mat: ReadonlyMat, op?: MatOpMV) => ReadonlyVec[];
export declare const __transformedPoints: (pts: ReadonlyVec[], mat: ReadonlyMat, op?: MatOpMV) => import("@thi.ng/vectors").Vec[];
export declare const __transformPointsWith: (pts: ReadonlyVec[], fn: Fn<ReadonlyVec, ReadonlyMat>, op?: MatOpMV) => ReadonlyVec[];
export declare const __transformedPointsWith: (pts: ReadonlyVec[], fn: Fn<ReadonlyVec, ReadonlyMat>, op?: MatOpMV) => import("@thi.ng/vectors").Vec[];
export declare const __transformedShape: (ctor: PCLikeConstructor) => ($: PCLike, mat: ReadonlyMat) => PCLike;
export declare const __transformedShapePoints: (ctor: PCLikeConstructor) => ($: PCLike, fn: Fn<ReadonlyVec, ReadonlyMat>) => PCLike;
export declare const __transformPoints3: (pts: ReadonlyVec[], mat: ReadonlyMat) => ReadonlyVec[];
export declare const __transformedPoints3: (pts: ReadonlyVec[], mat: ReadonlyMat) => import("@thi.ng/vectors").Vec[];
export declare const __transformedPointsWith3: (pts: ReadonlyVec[], fn: Fn<ReadonlyVec, ReadonlyMat>) => import("@thi.ng/vectors").Vec[];
export declare const __transformedShape3: (ctor: PCLikeConstructor) => ($: PCLike, mat: ReadonlyMat) => PCLike;
export declare const __transformedShapePoints3: (ctor: PCLikeConstructor) => ($: PCLike, fn: Fn<ReadonlyVec, ReadonlyMat>) => PCLike;
//# sourceMappingURL=transform.d.ts.map