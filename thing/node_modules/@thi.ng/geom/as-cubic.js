import { defmulti } from "@thi.ng/defmulti/defmulti";
import { closedCubicFromBreakPoints, openCubicFromBreakPoints, } from "@thi.ng/geom-splines/cubic-from-breakpoints";
import { closedCubicFromControlPoints, openCubicFromControlPoints, } from "@thi.ng/geom-splines/cubic-from-controlpoints";
import { TAU } from "@thi.ng/math/api";
import { mapcat } from "@thi.ng/transducers/mapcat";
import { Cubic } from "./api/cubic.js";
import { arc } from "./arc.js";
import { asPolygon } from "./as-polygon.js";
import { cubicFromArc, cubicFromLine, cubicFromQuadratic } from "./cubic.js";
import { __copyAttribs } from "./internal/copy.js";
import { __dispatch } from "./internal/dispatch.js";
export const asCubic = defmulti(__dispatch, {
    ellipse: "circle",
    quad: "poly",
    tri: "poly",
}, {
    arc: cubicFromArc,
    circle: ($) => asCubic(arc($.pos, $.r, 0, 0, TAU, true, true)),
    cubic: ($) => [$],
    group: ($) => [...mapcat(asCubic, $.children)],
    line: ({ attribs, points }) => [
        cubicFromLine(points[0], points[1], { ...attribs }),
    ],
    path: ($) => [
        ...mapcat((s) => (s.geo ? asCubic(s.geo) : null), $.segments),
    ],
    poly: ($, opts = {}) => polyCubic($, opts, closedCubicFromBreakPoints, closedCubicFromControlPoints),
    polyline: ($, opts = {}) => polyCubic($, opts, openCubicFromBreakPoints, openCubicFromControlPoints),
    quadratic: ({ attribs, points }) => [
        cubicFromQuadratic(points[0], points[1], points[2], { ...attribs }),
    ],
    rect: ($, opts) => asCubic(asPolygon($), opts),
});
// prettier-ignore
const polyCubic = ($, opts, breakPoints, controlPoints) => {
    opts = { breakPoints: false, scale: 1 / 3, uniform: false, ...opts };
    return (opts.breakPoints
        ? breakPoints($.points, opts.scale, opts.uniform)
        : controlPoints($.points, opts.scale, opts.uniform)).map((pts) => new Cubic(pts, __copyAttribs($)));
};
