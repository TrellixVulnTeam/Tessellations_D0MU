import { DEFAULT, defmulti } from "@thi.ng/defmulti/defmulti";
import { polyArea2 } from "@thi.ng/geom-poly-utils/area";
import { PI } from "@thi.ng/math/api";
import { signedArea2 } from "@thi.ng/vectors/signed-area";
import { __dispatch } from "./internal/dispatch.js";
/**
 * Returns the possibly signed (unsigned by default) surface area of given
 * `shape`. For groups calls {@link area} for each child and returns sum of
 * unsigned areas.
 *
 * In general, for polygons and triangles, the sign of the result can be
 * used as indication of the shapes orientation (clockwise /
 * counterclockwise).
 *
 * For curves, lines, point clouds and rays the function returns 0.
 *
 * Implemented for:
 *
 * - AABB
 * - Circle
 * - Cubic
 * - Ellipse
 * - Group
 * - Line
 * - Plane
 * - Points
 * - Polygon
 * - Polyline
 * - Quad
 * - Quadratic
 * - Ray
 * - Rect
 * - Sphere
 * - Triangle
 *
 * @param shape - shape to operate on
 * @param signed - true, if signed area
 */
export const area = defmulti(__dispatch, { quad: "poly" }, {
    aabb: ({ size: [w, h, d] }) => 2 * (w * h + w * d + h * d),
    arc: 
    // http://cut-the-knot.org/Generalization/Cavalieri2.shtml
    ($) => 0.5 * Math.abs($.start - $.end) * $.r[0] * $.r[1],
    circle: ($) => PI * $.r ** 2,
    ellipse: ($) => PI * $.r[0] * $.r[1],
    group: ({ children }) => children.reduce((sum, $) => sum + area($, false), 0),
    plane: () => Infinity,
    poly: ($, signed) => {
        const area = polyArea2($.points);
        return signed ? area : Math.abs(area);
    },
    rect: ($) => $.size[0] * $.size[1],
    sphere: ($) => 4 * PI * $.r ** 2,
    tri: ($, signed) => {
        const area = 0.5 * signedArea2(...$.points);
        return signed ? area : Math.abs(area);
    },
    [DEFAULT]: () => 0,
});
