import { equiv } from "@thi.ng/equiv";
import { __copyAttribs } from "../internal/copy.js";
export class Group {
    constructor(attribs, children = []) {
        this.attribs = attribs;
        this.children = children;
    }
    get type() {
        return "group";
    }
    *[Symbol.iterator]() {
        yield* this.children;
    }
    copy() {
        return this.copyTransformed((c) => c.copy());
    }
    copyTransformed(fn) {
        return new Group(__copyAttribs(this), this.children.map(fn));
    }
    equiv(o) {
        return o instanceof Group && equiv(this.children, o.children);
    }
    toHiccup() {
        return ["g", this.attribs, ...this.children.map((x) => x.toHiccup())];
    }
}
