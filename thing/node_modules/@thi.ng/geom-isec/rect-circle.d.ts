import type { Fn4 } from "@thi.ng/api";
import type { MultiVecOpImpl, ReadonlyVec } from "@thi.ng/vectors";
export declare const testBoxSphere: MultiVecOpImpl<Fn4<ReadonlyVec, ReadonlyVec, ReadonlyVec, number, boolean>>;
/**
 * Returns true if given 2D rect defined by `boxMinPos` and `boxSize`
 * intersects circle.
 *
 * @param boxMinPos
 * @param boxSize
 * @param circlePos
 * @param r
 */
export declare const testRectCircle: Fn4<ReadonlyVec, ReadonlyVec, ReadonlyVec, number, boolean>;
/**
 * Same as {@link testRectCircle}, but for 3D AABB and sphere.
 *
 * @param boxMinPos
 * @param boxSize
 * @param spherePos
 * @param r
 */
export declare const testAABBSphere: Fn4<ReadonlyVec, ReadonlyVec, ReadonlyVec, number, boolean>;
/**
 * Like {@link testCenteredAABBSphere}, but for arbitrary dimensions w/
 * optimized execution for 2D & 3D cases.
 *
 * @param boxCenter
 * @param boxExtent
 * @param spherePos
 * @param r
 */
export declare const testCenteredBoxSphere: MultiVecOpImpl<Fn4<ReadonlyVec, ReadonlyVec, ReadonlyVec, number, boolean>>;
/**
 * Similar to {@link testRectCircle}, but for rects defined by centroid
 * and radius-like extent.
 *
 * @param rectPos
 * @param extent
 * @param circlePos
 * @param r
 */
export declare const testCenteredRectCircle: Fn4<ReadonlyVec, ReadonlyVec, ReadonlyVec, number, boolean>;
/**
 * Similar to {@link testAABBSphere}, but for AABBs defined by centroid
 * and radius-like extent.
 *
 * @param boxCenter
 * @param boxExtent
 * @param spherePos
 * @param r
 */
export declare const testCenteredAABBSphere: Fn4<ReadonlyVec, ReadonlyVec, ReadonlyVec, number, boolean>;
//# sourceMappingURL=rect-circle.d.ts.map