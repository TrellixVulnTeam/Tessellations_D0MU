import type { Fn3, FnN7, FnU4, FnU5 } from "@thi.ng/api";
import type { MultiVecOpImpl, ReadonlyVec } from "@thi.ng/vectors";
export declare const pointInSegment: (p: ReadonlyVec, a: ReadonlyVec, b: ReadonlyVec, eps?: number) => boolean;
export declare const pointInCircle: (p: ReadonlyVec, pos: ReadonlyVec, r: number) => boolean;
export declare const pointInSphere: (p: ReadonlyVec, pos: ReadonlyVec, r: number) => boolean;
export declare const classifyPointInCircle: (p: ReadonlyVec, pos: ReadonlyVec, r: number, eps?: number) => 0 | 1 | -1;
/**
 * Returns positive value if `p` lies inside the circle passing through a,b,c.
 * Returns negative value if `p` is outside and zero if all 4 points are
 * cocircular.
 *
 * @remarks
 * Assumes a,b,c are in ccw order or else result will be have inverted sign.
 *
 * Based on Jonathan R. Shewchuck:
 * http://www.cs.cmu.edu/afs/cs/project/quake/public/code/predicates.c
 *
 * Also see {@link pointInCircumCircle}
 *
 * @param p
 * @param a
 * @param b
 * @param c
 */
export declare const pointIn3Circle: FnU4<ReadonlyVec, number>;
/**
 * Returns positive value if `p` lies inside the sphere passing through a,b,c,d.
 * Returns negative value if `p` is outside and zero if all 5 points are
 * cospherical.
 *
 * @remarks
 * Assumes a,b,c,d are in ccw order or else result will be have inverted sign.
 *
 * Based on Jonathan R. Shewchuck:
 * http://www.cs.cmu.edu/afs/cs/project/quake/public/code/predicates.c
 *
 * @param p
 * @param a
 * @param b
 * @param c
 * @param d
 */
export declare const pointIn4Sphere: FnU5<ReadonlyVec, number>;
export declare const pointInCircumCircle: FnU4<ReadonlyVec, boolean>;
export declare const pointInTriangle2: FnU4<ReadonlyVec, boolean>;
export declare const classifyPointInTriangle2: (p: ReadonlyVec, a: ReadonlyVec, b: ReadonlyVec, c: ReadonlyVec, eps?: number) => 0 | 1 | -1;
export declare const pointInPolygon2: (p: ReadonlyVec, pts: ReadonlyVec[]) => number;
export declare const classifyPointPolyPair: FnN7;
export declare const pointInBox: MultiVecOpImpl<Fn3<ReadonlyVec, ReadonlyVec, ReadonlyVec, boolean>>;
export declare const pointInRect: Fn3<ReadonlyVec, ReadonlyVec, ReadonlyVec, boolean>;
export declare const pointInAABB: Fn3<ReadonlyVec, ReadonlyVec, ReadonlyVec, boolean>;
export declare const pointInCenteredBox: MultiVecOpImpl<Fn3<ReadonlyVec, ReadonlyVec, ReadonlyVec, boolean>>;
export declare const pointInCenteredRect: Fn3<ReadonlyVec, ReadonlyVec, ReadonlyVec, boolean>;
export declare const pointInCenteredAABB: Fn3<ReadonlyVec, ReadonlyVec, ReadonlyVec, boolean>;
//# sourceMappingURL=point.d.ts.map