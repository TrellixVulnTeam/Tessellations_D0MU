import { MultiVecOpVO, ReadonlyVec } from "./api.js";
/**
 * Converts polar vector `v` to cartesian coordinates and adds optional
 * `offset`. See {@link polar} for reverse operation. If `out` is null,
 * modifies `v` in place.
 *
 * @param out -
 * @param v -
 * @param offset -
 */
export declare const cartesian: MultiVecOpVO<ReadonlyVec>;
/**
 * Converts 2D polar vector `v` to cartesian coordinates and adds
 * optional `offset`. See {@link polar} for reverse operation. If `out` is
 * null, modifies `v` in place.
 *
 * @param out -
 * @param v -
 * @param offset -
 */
export declare const cartesian2: import("./api.js").VecOpVO<ReadonlyVec>;
/**
 * Converts 3D polar vector `v` to cartesian coordinates and adds
 * optional `offset`. See {@link polar} for reverse operation. If `out` is
 * null, modifies `v` in place.
 *
 * @param out -
 * @param v -
 * @param offset -
 */
export declare const cartesian3: import("./api.js").VecOpVO<ReadonlyVec>;
//# sourceMappingURL=cartesian.d.ts.map