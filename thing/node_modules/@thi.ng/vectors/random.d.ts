import type { IRandom } from "@thi.ng/random";
import type { MultiVecOpFN, MultiVecOpOOO, ReadonlyVec, Vec, VecOpFN, VecOpOOO } from "./api.js";
/**
 * Sets `v` to random vector, with each component in interval `[n..m)`. If no
 * `rnd` instance is given, uses {@link @thi.ng/random#SYSTEM}, i.e.
 * `Math.random`. Creates new vector if `v` is null.
 *
 * @remarks
 * The non-fixed sized version of this function can ONLY be used if `v` is given
 * and initialized to the desired size/length.
 *
 * @param v -
 * @param n - default -1
 * @param m - default 1
 * @param rnd -
 */
export declare const random: MultiVecOpOOO<number, number, IRandom>, random2: VecOpOOO<number, number, IRandom>, random3: VecOpOOO<number, number, IRandom>, random4: VecOpOOO<number, number, IRandom>;
/**
 * Sets `v` to random vector, with each component drawn from given random
 * distribution function (default: gaussian/normal distribution) and scaled to
 * `n` (default: 1). Creates new vector if `v` is null.
 *
 * @remarks
 * The non-fixed sized version of this function can ONLY be used if `v` is given
 * and initialized to the desired size/length.
 *
 * References:
 * - https://docs.thi.ng/umbrella/random/#random-distributions
 * - https://docs.thi.ng/umbrella/random/modules.html#normal
 *
 * @param v -
 * @param rnd -
 * @param n - default 1
 */
export declare const randomDistrib: MultiVecOpFN, randomDistrib2: VecOpFN, randomDistrib3: VecOpFN, randomDistrib4: VecOpFN;
/**
 * Sets `v` to a random vector (using {@link random}), normalized to length `n`
 * (default: 1). If no `rnd` instance is given, uses
 * {@link @thi.ng/random#SYSTEM}, i.e. `Math.random`.
 *
 * @remarks
 * The non-fixed sized version of this function can ONLY be used if `v` is given
 * and initialized to the desired size/length.
 *
 * @param v -
 * @param n -
 * @param rnd -
 */
export declare const randNorm: (v: Vec | null, n?: number, rnd?: IRandom) => Vec;
export declare const randNorm2: (v: Vec | null, n?: number, rnd?: IRandom) => Vec;
export declare const randNorm3: (v: Vec | null, n?: number, rnd?: IRandom) => Vec;
export declare const randNorm4: (v: Vec | null, n?: number, rnd?: IRandom) => Vec;
/**
 * Similar to {@link randNorm} but wraps {@link randomDistrib} which draws
 * samples from given distribution function (default: gaussian/normal
 * distribution).
 *
 * @remarks
 * The non-fixed sized version of this function can ONLY be used if `v` is given
 * and initialized to the desired size/length.
 */
export declare const randNormDistrib: VecOpFN;
export declare const randNormDistrib2: VecOpFN;
export declare const randNormDistrib3: VecOpFN;
export declare const randNormDistrib4: VecOpFN;
/**
 * Sets `out` to random vector with each component in the semi-open
 * interval defined by [min,max).
 *
 * @param out -
 * @param min -
 * @param max -
 * @param rnd -
 */
export declare const randMinMax: MultiVecOpOOO<ReadonlyVec, ReadonlyVec, IRandom>, randMinMax2: VecOpOOO<ReadonlyVec, ReadonlyVec, IRandom>, randMinMax3: VecOpOOO<ReadonlyVec, ReadonlyVec, IRandom>, randMinMax4: VecOpOOO<ReadonlyVec, ReadonlyVec, IRandom>;
//# sourceMappingURL=random.d.ts.map