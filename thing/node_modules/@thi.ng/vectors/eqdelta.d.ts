import type { MultiVecOpRoVVO, ReadonlyVec } from "./api.js";
/**
 * Checks given vectors for componentwise equality, taking tolerance
 * `eps` (default: {@link @thi.ng/math#EPS}) into account.
 *
 * @param a
 * @param b
 * @param eps
 */
export declare const eqDelta: MultiVecOpRoVVO<boolean, number>;
export declare const eqDelta2: import("./api.js").VecOpRoVVO<boolean, number>;
export declare const eqDelta3: import("./api.js").VecOpRoVVO<boolean, number>;
export declare const eqDelta4: import("./api.js").VecOpRoVVO<boolean, number>;
/**
 * Checks given strided vectors for componentwise equality, taking
 * tolerance `eps` (default: {@link @thi.ng/math#EPS}) into account.
 *
 * @param a - first vector
 * @param b - second vector
 * @param n - number of elements
 * @param eps - tolerance
 * @param ia - start index a
 * @param ib - start index b
 * @param sa - stride a
 * @param sb - stride b
 */
export declare const eqDeltaS: (a: ReadonlyVec, b: ReadonlyVec, n: number, eps?: number, ia?: number, ib?: number, sa?: number, sb?: number) => boolean;
export declare const eqDeltaArray: (a: ReadonlyVec[], b: ReadonlyVec[], eps?: number) => boolean;
export declare const isInArray: (p: ReadonlyVec, pts: ReadonlyVec[], eps?: number) => boolean;
//# sourceMappingURL=eqdelta.d.ts.map