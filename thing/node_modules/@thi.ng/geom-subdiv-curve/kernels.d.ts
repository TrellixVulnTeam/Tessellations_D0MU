import type { ReadonlyVec } from "@thi.ng/vectors";
/**
 * HOF subdiv kernel function for computing 2 split points from 2 source
 * points, using weighted summation (thi.ng/vectors/addW2)
 *
 * @param u - split coeffs
 * @param v - split coeffs
 */
export declare const kernel2: ([ua, ub]: number[], [va, vb]: number[]) => ([a, b]: ReadonlyVec[]) => import("@thi.ng/vectors").Vec[];
/**
 * HOF subdiv kernel function for computing 2 split points from 3 source
 * points, using weighted summation (thi.ng/vectors/addW3)
 *
 * @param u - split coeffs
 * @param v - split coeffs
 */
export declare const kernel3: ([ua, ub, uc]: number[], [va, vb, vc]: number[]) => ([a, b, c]: ReadonlyVec[]) => import("@thi.ng/vectors").Vec[];
/**
 * HOF subdiv kernel function for computing 2 split points from 5 source
 * points, using weighted summation (thi.ng/vectors/addW5)
 *
 * @param u - split coeffs
 * @param v - split coeffs
 */
export declare const kernel5: ([ua, ub, uc, ud, ue]: number[], [va, vb, vc, vd, ve]: number[]) => ([a, b, c, d, e]: ReadonlyVec[]) => import("@thi.ng/vectors").Vec[];
//# sourceMappingURL=kernels.d.ts.map