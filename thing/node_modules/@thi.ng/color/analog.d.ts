import type { Fn3, Fn4, FnU3 } from "@thi.ng/api";
import type { IRandom } from "@thi.ng/random";
import type { Color, ReadonlyColor, TypedColor } from "./api.js";
export declare const defAnalog: FnU3<Fn3<number, number, IRandom, number>, Fn4<Color | null, TypedColor<any>, number, IRandom | undefined, Color>>;
/**
 * Returns a random analog color based on given `src` color and variance
 * `delta`. Each channel will be randomized by +/- `delta`, optionally using
 * provided {@link @thi.ng/random#IRandom} PRNG.
 */
export declare const analog: import("@thi.ng/defmulti/api").MultiFn4<import("@thi.ng/vectors").Vec | null, TypedColor<any>, number, IRandom | undefined, import("@thi.ng/vectors").Vec>;
/**
 * Similar to {@link analogRGB}. Returns an analog color based on given HSVA
 * color, with each channel randomly varied by given channel-specific delta
 * amounts (and optionally given {@link @thi.ng/random#IRandom} PRNG).
 *
 * @remarks
 * This function provides more user control than {@link analog}, but the latter
 * is recommended for most use cases.
 *
 * By default (unless `deltaS`, `deltaV`, `deltaA` are provided) only the hue of
 * the color will be modulated.
 *
 * @param out
 * @param src
 * @param deltaH
 * @param deltaS
 * @param deltaV
 * @param deltaA
 * @param rnd
 */
export declare const analogHsv: (out: Color | null, src: ReadonlyColor, deltaH: number, deltaS?: number, deltaV?: number, deltaA?: number, rnd?: IRandom) => import("@thi.ng/vectors").Vec;
/**
 * Similar to {@link analogHSV}. Returns an analog color based on given RGBA
 * color, with each channel randomly varied by given delta amounts (and
 * optionally given {@link @thi.ng/random#IRandom} PRNG).
 *
 * @remarks
 * By default the green and blue channel variance will be the same as `deltaR`.
 *
 * @param out
 * @param src
 * @param deltaR
 * @param deltaG
 * @param deltaB
 * @param deltaA
 * @param rnd
 */
export declare const analogRgb: (out: Color | null, src: ReadonlyColor, deltaR: number, deltaG?: number, deltaB?: number, deltaA?: number, rnd?: IRandom) => import("@thi.ng/vectors").Vec;
//# sourceMappingURL=analog.d.ts.map