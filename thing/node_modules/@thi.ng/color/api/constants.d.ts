/**
 * RGB black
 */
export declare const BLACK: readonly number[];
/**
 * RGB white
 */
export declare const WHITE: readonly number[];
/**
 * RGB red
 */
export declare const RED: readonly number[];
/**
 * RGB green
 */
export declare const GREEN: readonly number[];
/**
 * RGB blue
 */
export declare const BLUE: readonly number[];
/**
 * RGB cyan
 */
export declare const CYAN: readonly number[];
/**
 * RGB magenta
 */
export declare const MAGENTA: readonly number[];
/**
 * RGB yellow
 */
export declare const YELLOW: readonly number[];
/**
 * ITU-R BT.601 RGB luminance coeffs
 *
 * @remarks
 * Reference:
 * https://en.wikipedia.org/wiki/YCbCr#ITU-R_BT.601_conversion
 */
export declare const RGB_LUMINANCE_REC601: number[];
/**
 * ITU-R BT.709 RGB luminance coeffs
 *
 * @remarks
 * Reference:
 * https://en.wikipedia.org/wiki/YCbCr#ITU-R_BT.709_conversion
 */
export declare const RGB_LUMINANCE_REC709: number[];
/**
 * ITU-R BT.2020 RGB luminance coeffs
 *
 * @remarks
 * Reference:
 * https://en.wikipedia.org/wiki/YCbCr#ITU-R_BT.2020_conversion
 */
export declare const RGB_LUMINANCE_REC2020: number[];
/**
 * sRGB to XYZ D65 conversion matrix
 *
 * @remarks
 * Reference:
 * http://www.brucelindbloom.com/index.html?Eqn_RGB_XYZ_Matrix.html
 */
export declare const RGB_XYZ_D50: number[];
/**
 * XYZ D50 to sRGB conversion matrix
 *
 * @remarks
 * Reference:
 * http://www.brucelindbloom.com/index.html?Eqn_RGB_XYZ_Matrix.html
 */
export declare const XYZ_RGB_D50: number[];
/**
 * sRGB to XYZ D65 conversion matrix
 *
 * @remarks
 * Reference:
 * http://www.brucelindbloom.com/index.html?Eqn_RGB_XYZ_Matrix.html
 */
export declare const RGB_XYZ_D65: number[];
/**
 * XYZ D65 to sRGB conversion matrix
 *
 * @remarks
 * Reference:
 * http://www.brucelindbloom.com/index.html?Eqn_RGB_XYZ_Matrix.html
 */
export declare const XYZ_RGB_D65: number[];
/**
 * D50 -> D65 chromatic adaptation matrix. Inverse of {@link BRADFORD_D65_D50}.
 *
 * @remarks
 * Reference:
 * http://www.brucelindbloom.com/index.html?Eqn_ChromAdapt.html
 */
export declare const BRADFORD_D50_D65: number[];
/**
 * D65 -> D50 chromatic adaptation matrix. Inverse of {@link BRADFORD_D50_D65}.
 *
 * @remarks
 * Reference:
 * http://www.brucelindbloom.com/index.html?Eqn_ChromAdapt.html
 */
export declare const BRADFORD_D65_D50: number[];
/**
 * CIE Standard Illuminant D50
 */
export declare const D50: number[];
/**
 * CIE Standard Illuminant D65
 *
 * Reference:
 * https://en.wikipedia.org/wiki/Illuminant_D65
 */
export declare const D65: number[];
export declare const OKLAB_M1: number[];
export declare const OKLAB_M2: number[];
/**
 * Float value formatter
 *
 * @internal
 */
export declare let FF: import("@thi.ng/strings").Stringer<number>;
/**
 * Percentage value formatter
 *
 * @internal
 */
export declare let PC: import("@thi.ng/strings").Stringer<number>;
/**
 * Sets precision for CSS formatted values to `x` significant digits (default:
 * 3).
 *
 * @param x
 */
export declare const setPrecision: (x: number) => void;
export declare const INV8BIT: number;
export declare const EPS: number;
//# sourceMappingURL=constants.d.ts.map