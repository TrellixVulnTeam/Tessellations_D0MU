import { intersectLinePolylineAll } from '@thi.ng/geom-isec/line-poly';
import { pointInPolygon2 } from '@thi.ng/geom-isec/point';
import { intersectRayPolylineAll } from '@thi.ng/geom-isec/ray-poly';
import { direction } from '@thi.ng/vectors/direction';

/**
 * Computes all intersection points of the infinite line defined by `a`,
 * `b` with the given polygon. Returns an array of segments where the
 * line is inside the polygon.
 *
 * @param a
 * @param b
 * @param pts
 */
const clipLinePoly = (a, b, pts) => {
    const isecs = intersectRayPolylineAll(a, direction([], a, b), pts, true).isec;
    return isecs ? collectSegments(isecs) : undefined;
};
const clipLineSegmentPoly = (a, b, pts) => {
    const isecs = intersectLinePolylineAll(a, b, pts, true).isec;
    const isAInside = pointInPolygon2(a, pts);
    const isBInside = pointInPolygon2(b, pts);
    if (!isecs) {
        return isAInside && isBInside ? [[a, b]] : undefined;
    }
    isAInside && isecs.unshift(a);
    isBInside && isecs.push(b);
    return collectSegments(isecs);
};
const collectSegments = (isecs) => {
    const segments = [];
    for (let i = 0, n = isecs.length - 1; i < n; i += 2) {
        segments.push([isecs[i], isecs[i + 1]]);
    }
    return segments;
};

export { clipLinePoly, clipLineSegmentPoly };
