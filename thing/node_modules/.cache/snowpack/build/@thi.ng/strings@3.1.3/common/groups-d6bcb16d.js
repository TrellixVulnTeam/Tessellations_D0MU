/**
 * Yields iterator of characters [`from`..`to`] (inclusive). Uses
 * reverse ordering if `to` < `from`.
 *
 * @param from -
 * @param to -
 */
function* charRange(from, to) {
    let i = typeof from === "string" ? from.charCodeAt(0) : from;
    const end = typeof to === "string" ? to.charCodeAt(0) : to;
    if (i <= end) {
        for (; i <= end; i++) {
            yield String.fromCharCode(i);
        }
    }
    else {
        for (; i >= end; i--) {
            yield String.fromCharCode(i);
        }
    }
}

const defGroup = (...xs) => {
    const acc = {};
    for (let range of xs) {
        for (let c of range) {
            acc[c] = true;
        }
    }
    return Object.freeze(acc);
};
/**
 * Object with whitespace characters as keys and their values set to
 * true. All others undefined.
 */
const WS = Object.freeze({
    "\t": true,
    "\n": true,
    "\v": true,
    "\f": true,
    "\r": true,
    " ": true,
});
/**
 * Object with 0-9 characters as keys and their values set to true. All
 * others undefined.
 */
const DIGITS = defGroup(charRange("0", "9"));
/**
 * Object with hex digit characters (upper & lower case versions) as
 * keys and their values set to true. All others undefined.
 */
const HEX = defGroup(charRange("0", "9"), charRange("A", "F"), charRange("a", "f"));
/**
 * Object with ASCII lowercase characters as keys and their values set
 * to true. All others undefined.
 */
const LOWER = defGroup(charRange("a", "z"));
/**
 * Object with ASCII uppercase characters as keys and their values set
 * to true. All others undefined.
 */
const UPPER = defGroup(charRange("A", "Z"));
/**
 * Combination of {@link UPPER} and {@link LOWER}.
 */
const ALPHA = Object.freeze({ ...UPPER, ...LOWER });
/**
 * Combination of {@link ALPHA} and {@link DIGITS} and '_'.
 */
const ALPHA_NUM = Object.freeze({
    ...ALPHA,
    ...DIGITS,
    _: true,
});
/**
 * Object with ASCII punctuation characters as keys and their values set
 * to true. All others undefined.
 */
const PUNCTUATION = defGroup(charRange("!", "/"), charRange(":", "@"), charRange("[", "`"), charRange("{", "~"));

export { ALPHA as A, DIGITS as D, HEX as H, LOWER as L, PUNCTUATION as P, UPPER as U, WS as W, ALPHA_NUM as a, charRange as c };
