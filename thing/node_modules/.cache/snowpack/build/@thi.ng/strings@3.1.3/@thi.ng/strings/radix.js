import { U8 as U8$1, U16 as U16$1, U24 as U24$1, U32 as U32$1, U64HL } from '@thi.ng/hex';
import { memoizeJ } from '@thi.ng/memoize/memoizej';
import { r as repeat } from '../../common/repeat-df7f90b2.js';

/**
 * Returns a {@link Stringer} which formats given numbers to `radix`, `len` and
 * with optional prefix (not included in `len`).
 *
 * @remarks
 * Only bases 2 - 36 are supported, due to native `Number.toString()`
 * limitations.
 *
 * @param radix -
 * @param len -
 * @param prefix -
 */
const radix = memoizeJ((radix, n, prefix = "") => {
    const buf = repeat("0", n);
    return (x) => {
        x = (x >>> 0).toString(radix);
        return prefix + (x.length < n ? buf.substr(x.length) + x : x);
    };
});
/**
 * 8bit binary conversion preset.
 */
const B8 = radix(2, 8);
/**
 * 16bit binary conversion preset.
 */
const B16 = radix(2, 16);
/**
 * 32bit binary conversion preset.
 */
const B32 = radix(2, 32);
/**
 * 8bit hex conversion preset.
 * Assumes unsigned inputs.
 */
const U8 = U8$1;
/**
 * 16bit hex conversion preset.
 * Assumes unsigned inputs.
 */
const U16 = U16$1;
/**
 * 24bit hex conversion preset.
 * Assumes unsigned inputs.
 */
const U24 = U24$1;
/**
 * 32bit hex conversion preset.
 * Assumes unsigned inputs.
 */
const U32 = U32$1;
/**
 * 64bit hex conversion preset (2x 32bit ints)
 * Assumes unsigned inputs.
 */
const U64 = U64HL;

export { B16, B32, B8, U16, U24, U32, U64, U8, radix };
