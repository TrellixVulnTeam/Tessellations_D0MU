import { IntersectionType } from '@thi.ng/geom-api/isec';
import { maddN, maddN2 } from '@thi.ng/vectors/maddn';
import { N as NONE } from '../../common/api-94e0c15c.js';
import { eqDelta } from '@thi.ng/math/eqdelta';

const intersectRayLine = (rpos, dir, a, b, minD = 0, maxD = Infinity) => {
    const bax = b[0] - a[0];
    const bay = b[1] - a[1];
    const d = dir[0] * bay - dir[1] * bax;
    if (eqDelta(d, 0)) {
        return NONE;
    }
    const arx = a[0] - rpos[0];
    const ary = a[1] - rpos[1];
    const t = (bay * arx - bax * ary) / d;
    const s = (dir[1] * arx - dir[0] * ary) / d;
    return t >= minD && t <= maxD && s >= 0 && s <= 1
        ? {
            type: IntersectionType.INTERSECT,
            isec: maddN([], dir, t, rpos),
            alpha: t,
        }
        : NONE;
};

const startPoints = (pts, closed) => closed ? [pts[pts.length - 1], pts[0]] : [pts[0], pts[1]];
const intersectRayPolyline = (rpos, dir, pts, closed = false, minD = 0, maxD = Infinity) => {
    const n = pts.length - 1;
    let alpha = maxD;
    let cross = 0;
    let [i, j] = startPoints(pts, closed);
    for (let k = 0; k <= n; i = j, j = pts[++k]) {
        const d = intersectRayLine(rpos, dir, i, j, minD, maxD).alpha;
        if (d !== undefined) {
            cross++;
            if (d < alpha)
                alpha = d;
        }
    }
    return cross > 0
        ? {
            type: IntersectionType.INTERSECT,
            isec: maddN2([], dir, alpha, rpos),
            inside: !(cross & 1),
            alpha,
        }
        : NONE;
};
const intersectRayPolylineAll = (rpos, dir, pts, closed = false, minD = 0, maxD = Infinity) => {
    const n = pts.length - 1;
    let [i, j] = startPoints(pts, closed);
    const res = [];
    for (let k = 0; k <= n; i = j, j = pts[++k]) {
        const d = intersectRayLine(rpos, dir, i, j, minD, maxD).alpha;
        if (d !== undefined) {
            res.push([d, maddN2([], dir, d, rpos)]);
        }
    }
    return res.length
        ? {
            type: IntersectionType.INTERSECT,
            isec: res.sort((a, b) => a[0] - b[0]).map((x) => x[1]),
        }
        : NONE;
};

export { intersectRayPolyline, intersectRayPolylineAll };
