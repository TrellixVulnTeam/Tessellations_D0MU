import { closestPointPolyline, closestPointSegment, closestT } from '@thi.ng/geom-closest-point/line';
import { fit01 } from '@thi.ng/math/fit';
import { dist } from '@thi.ng/vectors/dist';
import { distSq } from '@thi.ng/vectors/distsq';
import { eqDelta } from '@thi.ng/vectors/eqdelta';
import { mixN } from '@thi.ng/vectors/mixn';
import { normalize } from '@thi.ng/vectors/normalize';
import { set } from '@thi.ng/vectors/set';
import { sub } from '@thi.ng/vectors/sub';

class Sampler {
    constructor(points, closed = false) {
        if (closed) {
            this.points = points.slice();
            this.points.push(points[0]);
        }
        else {
            this.points = points;
        }
        this.buildIndex();
    }
    totalLength() {
        const idx = this.index;
        return idx ? idx[idx.length - 1] : 0;
    }
    pointAt(t) {
        const pts = this.points;
        const n = pts.length - 1;
        if (n < 0) {
            return;
        }
        if (n === 0 || t <= 0) {
            return pts[0];
        }
        if (t >= 1) {
            return pts[n];
        }
        const idx = this.index;
        const t0 = t * idx[n];
        for (let i = 1; i <= n; i++) {
            if (idx[i] >= t0) {
                return mixN([], pts[i - 1], pts[i], (t0 - idx[i - 1]) / (idx[i] - idx[i - 1]));
            }
        }
    }
    closestPoint(p) {
        return closestPointPolyline(p, this.points);
    }
    closestT(p) {
        const { index, points } = this;
        const tmp = [];
        const closest = [];
        let minD = Infinity;
        let minI = -1;
        for (let i = 0, n = index.length - 1; i < n; i++) {
            if (closestPointSegment(p, points[i], points[i + 1], tmp)) {
                const d = distSq(p, tmp);
                if (d < minD) {
                    minD = d;
                    minI = i;
                    set(closest, tmp);
                }
            }
        }
        return minI >= 0
            ? fit01(closestT(p, points[minI], points[minI + 1]) || 0, index[minI], index[minI + 1]) / this.totalLength()
            : undefined;
    }
    segmentAt(t) {
        let i = this.indexAt(t);
        if (i === undefined) {
            return;
        }
        i = Math.max(1, i);
        return [this.points[i - 1], this.points[i]];
    }
    tangentAt(t, n = 1) {
        const seg = this.segmentAt(t);
        return seg ? normalize(null, sub([], seg[1], seg[0]), n) : undefined;
    }
    splitAt(t) {
        if (t <= 0 || t >= 1) {
            return [this.points];
        }
        const p = this.pointAt(t);
        if (!p)
            return;
        const i = Math.max(1, this.indexAt(t));
        const head = this.points.slice(0, i);
        const tail = this.points.slice(i);
        if (!eqDelta(head[i - 1], p)) {
            head.push(p);
        }
        if (!eqDelta(tail[0], p)) {
            tail.unshift(p);
        }
        return [head, tail];
    }
    splitNear(p) {
        const t = this.closestT(p);
        return t !== undefined ? this.splitAt(t) : undefined;
    }
    indexAt(t) {
        const pts = this.points;
        const n = pts.length - 1;
        if (n < 0) {
            return;
        }
        if (n === 0 || t <= 0) {
            return 0;
        }
        if (t >= 1) {
            return n;
        }
        const idx = this.index;
        const t0 = t * idx[n];
        for (let i = 1; i <= n; i++) {
            if (idx[i] >= t0) {
                return i;
            }
        }
    }
    sampleUniform(dist, includeLast = false, result = []) {
        const { index, points } = this;
        const total = this.totalLength();
        const delta = dist / total;
        const n = index.length;
        for (let t = 0, i = 1; t < 1; t += delta) {
            const ct = t * total;
            while (ct >= index[i] && i < n) {
                i++;
            }
            if (i >= n)
                break;
            const p = index[i - 1];
            result.push(mixN([], points[i - 1], points[i], (ct - p) / (index[i] - p)));
        }
        if (includeLast) {
            result.push(set([], points[points.length - 1]));
        }
        return result;
    }
    sampleFixedNum(num, includeLast = false, result) {
        return this.sampleUniform(this.totalLength() / num, includeLast, result);
    }
    buildIndex() {
        const idx = [0];
        const pts = this.points;
        const n = pts.length;
        for (let i = 0, j = 1; j < n; i = j, j++) {
            idx[j] = idx[i] + dist(pts[i], pts[j]);
        }
        this.index = idx;
    }
}

export { Sampler };
