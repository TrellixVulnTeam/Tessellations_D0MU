import { isIterable } from '@thi.ng/checks/is-iterable';
import { c as compR } from '../../common/compr-047fbcec.js';
import { iterator } from './iterator.js';
import { e as ensureReduced, r as reduced } from '../../common/reduced-6f291092.js';
import '@thi.ng/api/api';
import '../../common/ensure-ec27f47c.js';
import '@thi.ng/checks/implements-function';
import './push.js';
import './reduce.js';
import '@thi.ng/checks/is-arraylike';
import '@thi.ng/errors/illegal-arity';

function take(n, src) {
    return isIterable(src)
        ? iterator(take(n), src)
        : (rfn) => {
            const r = rfn[2];
            let m = n;
            return compR(rfn, (acc, x) => --m > 0
                ? r(acc, x)
                : m === 0
                    ? ensureReduced(r(acc, x))
                    : reduced(acc));
        };
}

export { take };
