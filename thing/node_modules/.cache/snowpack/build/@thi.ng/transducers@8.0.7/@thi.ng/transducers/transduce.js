import { illegalArity } from '@thi.ng/errors/illegal-arity';
import { e as ensureTransducer } from '../../common/ensure-ec27f47c.js';
import { map } from './map.js';
import { reduce, reduceRight } from './reduce.js';
import '@thi.ng/checks/implements-function';
import '@thi.ng/checks/is-iterable';
import '../../common/compr-047fbcec.js';
import './iterator.js';
import '@thi.ng/api/api';
import './push.js';
import '@thi.ng/checks/is-arraylike';
import '../../common/reduced-6f291092.js';

function transduce(...args) {
    return $transduce(transduce, reduce, args);
}
function transduceRight(...args) {
    return $transduce(transduceRight, reduceRight, args);
}
const $transduce = (tfn, rfn, args) => {
    let acc, xs;
    switch (args.length) {
        case 4:
            xs = args[3];
            acc = args[2];
            break;
        case 3:
            xs = args[2];
            break;
        case 2:
            return map((x) => tfn(args[0], args[1], x));
        default:
            illegalArity(args.length);
    }
    return rfn(ensureTransducer(args[0])(args[1]), acc, xs);
};

export { transduce, transduceRight };
